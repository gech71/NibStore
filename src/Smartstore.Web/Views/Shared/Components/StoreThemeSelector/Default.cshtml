@{
    var currentTheme = ViewBag.CurrentStoreTheme as StoreThemeModel;
    var themes = ViewBag.AvailableStoreThemes as List<StoreThemeModel>;

    if (themes.Count <= 1)
    {
        return;
    }

    var brownTheme = themes.FirstOrDefault(x => x.Name.ToLower().Contains("brown"));
    var yellowTheme = themes.FirstOrDefault(x => x.Name.ToLower().Contains("yellow"));
    var isYellow = currentTheme?.Name == yellowTheme?.Name;
}

<div class="theme-toggle @(isYellow ? "toggle-yellow" : "toggle-brown")" data-toggle="tooltip" data-placement="top" title="Switch to @(isYellow ? (brownTheme?.Title ?? "Brown") : (yellowTheme?.Title ?? "Yellow")) mode">
    <div class="toggle-slider">
        <div class="toggle-dot"></div>
    </div>
</div>

<style>
/* Smaller size toggle */
.theme-toggle {
    width: 40px;
    height: 20px;
    border-radius: 20px;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
    overflow: hidden;
    border: 2px solid transparent;
}

/* If current theme is yellow, toggle background should be yellow */
.theme-toggle.toggle-yellow {
    background-color: #FFD600;
    border-color: #7B4A1E;
}

/* If current theme is brown, toggle background should be brown */
.theme-toggle.toggle-brown {
    background-color: #7B4A1E;
    border-color: #FFD600;
}

/* Opposite background based on theme */
.toggle-slider {
    width: 100%;
    height: 100%;
    border-radius: 20px;
    position: relative;
    background-color: transparent;
}

/* Theme-colored dot */
.toggle-dot {
    width: 18px;
    height: 18px;
    border-radius: 50%;
    position: absolute;
    top: -1px;
    left: -1px;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Dot color and position for yellow theme */
.toggle-yellow .toggle-dot {
    transform: translateX(0);
    background-color: #7B4A1E;
}

/* Dot color and position for brown theme */
.toggle-brown .toggle-dot {
    transform: translateX(20px);
    background-color: #FFD600;
}
</style>

<script>
    $(function () {
        // Initialize theme selector functionality
        initializeThemeSelector();
    });

    function initializeThemeSelector() {
        // Use event delegation for all theme toggles
        $(document).on('click', '.theme-toggle', function (e) {
            e.preventDefault();
            e.stopPropagation();
            
            const $toggle = $(this);
            const isCurrentlyYellow = $toggle.hasClass('toggle-yellow');
            const newTheme = isCurrentlyYellow ? '@brownTheme?.Name' : '@yellowTheme?.Name';
            const newMode = isCurrentlyYellow ? '@brownTheme?.Title' : '@yellowTheme?.Title';

            // Disable click during transition
            $toggle.css('pointer-events', 'none');

            // Update tooltip text
            $toggle.attr('data-original-title', 'Switch to ' + newMode + ' mode').tooltip('show');

            // Toggle background class
            $toggle.toggleClass('toggle-yellow toggle-brown');

            // Submit theme change via AJAX
            $.ajax({
                url: '@Url.Action("ChangeTheme", "Common")',
                type: 'POST',
                data: { themeName: newTheme },
                success: function() {
                    // Store the new theme state in localStorage
                    localStorage.setItem('currentTheme', newTheme);
                    
                    // Reload page after successful theme change
                    window.location.reload();
                },
                error: function() {
                    // Revert toggle state on error
                    $toggle.toggleClass('toggle-yellow toggle-brown');
                    // Re-enable click after error
                    $toggle.css('pointer-events', 'auto');
                }
            });
        });

        // Initialize tooltips for all theme toggles
        $('.theme-toggle').tooltip();

        // Sync theme state on page load
        const storedTheme = localStorage.getItem('currentTheme');
        if (storedTheme) {
            const isStoredYellow = storedTheme === '@yellowTheme?.Name';
            $('.theme-toggle').removeClass('toggle-yellow toggle-brown')
                .addClass(isStoredYellow ? 'toggle-yellow' : 'toggle-brown');
        }
    }
</script>
