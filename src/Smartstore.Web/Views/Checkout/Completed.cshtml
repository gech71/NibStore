@model Smartstore.Web.Models.Checkout.CheckoutCompletedModel
@using Smartstore.Core.Checkout.Orders
@using Smartstore.Web.Models.Checkout

@{
    Layout = "_Checkout";
    Assets.PrependTitleParts(T("PageTitle.Checkout.Completed"));
    Assets.BodyAttributes.AppendCssClass("no-offcanvas-cart");
    Assets.AddMetaRobots();
}

<widget target-zone="order_progress">
    @await Component.InvokeAsync("CheckoutProgress", new { action = CheckoutActionNames.Completed })
</widget>

<div class="page checkout-completed-page">
    <div class="heading mt-3">
        <h1 class="heading-title font-weight-light">@Html.Raw(T("Checkout.OrderHasBeenReceived"))</h1>
    </div>

    <h3 class="text-muted font-weight-light">
        @Html.Raw(T("Checkout.ThankYou"))
    </h3>

    <div class="page-body checkout-data pt-4">
        <div class="order-completed">
            <zone name="checkout_completed_top" />

            <div class="body fs-h5">
                <p>
                    <span>@T("Checkout.OrderNumber"):</span>
                    <a asp-action="Details" asp-controller="Order" asp-route-id="@Model.OrderId" rel="nofollow"><strong>@Model.OrderNumber</strong></a>
                </p>
                @if (!string.IsNullOrEmpty(Model.OrderPin))
                {
                    <div class="alert alert-info mb-0">
                        <span style="font-size:1.25rem;">
                            <strong>Order PIN:</strong>
                            <span class="text-danger" style="text-decoration:underline;">@Model.OrderPin</span>
                        </span>
                        <div class="mt-1 text-muted" style="font-size:1rem;">
                            Please use this PIN for order pickup or delivery confirmation.
                        </div>
                    </div>
                }
            </div>

            <!-- Save for reorder section -->
            <form id="saveOrderForm" asp-action="SaveForReorder" asp-controller="Order" method="post">
                <div class="form-group mt-4">
                    <label for="saveOrderForReorder" class="form-check-label">
                        <input type="checkbox" id="saveOrderForReorder" name="saveForReordering" class="form-check-input" aria-describedby="saveOrderMsg" />
                        @T("Would you like to save this order for future reordering?")
                    </label>
                    <div id="recurringOrderNameGroup" class="mt-2" style="display:none;">
                        <input type="text" id="recurringOrderName" name="recurringOrderName" class="form-control" maxlength="100"
                               placeholder="@T("Enter a name for your recurring order")" />
                    </div>
                    <button id="saveOrderBtn" class="btn btn-primary btn-sm" type="submit" style="display:none;">
                        @T("Save for Reordering")
                    </button>
                    <span id="saveOrderMsg" class="text-success d-none" aria-live="polite">@T("Order saved for reordering!")</span>
                    <span id="saveOrderError" class="text-danger d-none" aria-live="polite">@T("Failed to save order for reordering.")</span>
                    <input type="hidden" name="orderId" value="@Model.OrderId" />
                    @Html.AntiForgeryToken()
                </div>
            </form>

            <p class="pt-3 mb-5">
                <a asp-action="Details" asp-controller="Order" asp-route-id="@Model.OrderId" class="btn btn-warning" rel="nofollow">
                    <span>@T("Checkout.PlacedOrderDetails")</span>
                </a>
                <a asp-route="Homepage" class="btn btn-secondary order-completed-continue-button">
                    <span>@T("Checkout.Continue")</span>
                </a>
            </p>

            <zone name="checkout_completed_bottom" />
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const checkbox = document.getElementById('saveOrderForReorder');
            const button = document.getElementById('saveOrderBtn');
            const nameGroup = document.getElementById('recurringOrderNameGroup');
            const nameInput = document.getElementById('recurringOrderName');
            const successMsg = document.getElementById('saveOrderMsg');
            const errorMsg = document.getElementById('saveOrderError');
            const form = document.getElementById('saveOrderForm');

            checkbox.addEventListener('change', function () {
                button.style.display = this.checked ? 'inline-block' : 'none';
                nameGroup.style.display = this.checked ? 'block' : 'none';
                successMsg.classList.add('d-none');
                errorMsg.classList.add('d-none');
                if (!this.checked) {
                    nameInput.value = '';
                }
            });

            form.addEventListener('submit', function (e) {
                e.preventDefault();
                const formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            successMsg.classList.remove('d-none');
                            button.style.display = 'none';
                            checkbox.disabled = true; // Prevent further changes
                            nameInput.disabled = true;
                        } else {
                            errorMsg.classList.remove('d-none');
                        }
                    })
                    .catch(() => {
                        errorMsg.classList.remove('d-none');
                    });
            });
        });
    </script>
}