﻿@using Smartstore.Web.Models.Checkout
@using Smartstore.Core.Checkout.Cart
@using Smartstore.Core
@using Smartstore.Core.Common.Services
@inject IStoreProductService storeProductService
@inject IShoppingCartService shoppingCartService
@inject IWorkContext workContext

@model CheckoutShippingMethodModel

@functions {
    private IList<ShoppingCartItem> _cartItems;

    public async Task LoadCartAsync()
    {
        var customer = workContext.CurrentCustomer;
        var cart = await shoppingCartService.GetCartAsync(customer, ShoppingCartType.ShoppingCart);
        _cartItems = cart.Items.Select(x => x.Item).ToList();
    }
}

@{
    await LoadCartAsync();
    var sortedShippingMethods = Model.ShippingMethods
        .OrderBy(sm =>
            sm.Name.ToLowerInvariant().Contains("by ground") ? 0 :
            sm.Name.ToLowerInvariant().Contains("store pickup") ? 1 : 2)
        .ToList();

    var storePickupMethod = sortedShippingMethods
        .FirstOrDefault(sm => sm.Name.ToLowerInvariant().Contains("store pickup"));
    var storePickupMethodId = storePickupMethod?.ShippingMethodId ?? 0;
}

<zone name="checkout_shipping_method_content_before" />

@if (Model.Warnings.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var warning in Model.Warnings)
            {
                <li>@warning</li>
            }
        </ul>
    </div>
}
else
{
    <ul class="list-group opt-list shipping-options">
        @for (int i = 0; i < sortedShippingMethods.Count; i++)
        {
            var shippingMethod = sortedShippingMethods[i];
            var isStorePickup = shippingMethod.Name?.ToLowerInvariant().Contains("store pickup") == true;
            var isByGround = shippingMethod.Name.ToLowerInvariant() == "by ground";

            <li class="list-group-item opt-list-item shipping-option-item @(shippingMethod.Selected ? "active" : "")" data-index="@i">
                <div class="opt-data">
                    <div class="form-check opt-control option-name radio">
                        <input id="shippingoption_@(i)" type="radio" name="shippingoption"
                               class="opt-radio form-check-input"
                               value="@(shippingMethod.ShippingMethodId)___@(shippingMethod.ShippingRateComputationMethodSystemName)"
                               data-shippingmethodid="@(shippingMethod.ShippingMethodId)"
                               data-shipping-name="@shippingMethod.Name"
                               data-shipping-fee="@shippingMethod.Fee"
                               @(shippingMethod.Selected ? "checked" : "") />
                        <label class="form-check-label" for="shippingoption_@(i)">
                            @{
                                var displayName = shippingMethod.Name == "By Ground" ? "Delivery" : shippingMethod.Name;
                            }
                            <span class="opt-name">@Html.Raw(displayName.HtmlDecode())</span>
                        </label>
                    </div>

                    @if (shippingMethod.Fee > decimal.Zero)
                    {
                        <div class="opt-fee shipping-fee badge badge-danger ml-auto">
                            @shippingMethod.Fee
                        </div>
                    }
                </div>

               @if (isStorePickup)
{
    <div id="storePickupProducts" class="mt-3">
        <label class="form-label font-weight-bold">Your Cart Items:</label>
        <div class="list-group">
            @foreach (var item in _cartItems)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center product-item" style="position: relative;">
                    <div>
                        <div class="product-name">@item.Product.Name</div>
                        <div class="product-quantity text-muted small">Qty: @item.Quantity</div>
                    </div>
                    @{
                        var availableStores = await storeProductService.GetStoresForProductAsync(item.ProductId, item.Quantity);
                    }

                    @if (availableStores.Any())
                    {
                        <div>
                            <select class="form-control store-select form-control-sm store-select-dropdown"
                                    data-item-id="@item.Id"
                                    name="StoreFor_@item.Id"
                                    style="min-width: 150px;">
                                <option value="">-- Select Store --</option>
                                @foreach (var store in availableStores)
                                {
                                    <option value="@store.Name"
                                            data-store-id="@store.Id"
                                           >
                                        @store.Name
                                    </option>
                                }
                            </select>
                            <span class="store-feedback small d-block mt-1" style="display:none;"></span>
                        </div>
                    }
                    else
                    {
                       <div class="no-store-no-stock" data-item-id="@item.Id">
                              <span>No stores have sufficient stock for this item</span>
                               <button class="remove-item-x">x</button>
                           </div>

                    }
                </div>
            }
            <!-- Existing validation error -->
            <div class="store-pickup-validation-error text-danger small d-none mt-2">
                Please select a store for every item in your cart.
            </div>
        </div>
    </div>
}


                @if (isByGround)
                {
                    <div class="by-ground-extra mt-3" style="display:@(shippingMethod.Selected ? "flex" : "none"); flex-wrap: wrap; align-items:center; gap:8px;">
                        <div class="w-100">
                            <div class="input-group">
                                <input type="text" 
                                       class="form-control map-address-input" 
                                       placeholder="Enter delivery address" 
                                       name="ByGroundAddress" 
                                       id="addressInput"
                                       value="@Model.ByGroundAddress" 
                                       autocomplete="address-line1" />
                                <button type="button" class="btn btn-primary current-location-btn" title="Use Current Location">
                                    <i class="fa fa-location-dot"></i>
                                </button>
                                <button type="button" class="btn btn-light map-toggle-btn" title="Show/Hide Map">
                                    <i class="fa fa-globe"></i>
                                </button>
                            </div>
                            <div id="addressSuggestions" class="dropdown-menu w-100" style="display: none;"></div>
                        </div>
                        <div id="addressError" class="text-danger small mt-1" style="display:none;"></div>
                        
                        <input type="hidden" id="mapCoordinates" name="MapCoordinates" value="" />
                        <input type="hidden" id="latitudeField" name="ByGroundLatitude" value="@Model.ByGroundLatitude" />
                        <input type="hidden" id="longitudeField" name="ByGroundLongitude" value="@Model.ByGroundLongitude" />

                        <div id="leafletMap" style="height: 300px; width: 100%; margin-top: 10px; border: 1px solid #ddd; border-radius: 4px; display: none;"></div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(shippingMethod.Description))
                {
                    <div class="opt-info text-muted shipping-option-description mt-2">
                        @if (!string.IsNullOrEmpty(shippingMethod.BrandUrl))
                        {
                            <div class="media">
                                <span class="float-left">
                                    <img class="media-object img-fluid" src="@Url.Content(shippingMethod.BrandUrl)" alt="@shippingMethod.Name" />
                                </span>
                                <div class="media-body">
                                    @Html.Raw(shippingMethod.Description)
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.Raw(shippingMethod.Description);
                        }
                    </div>
                }
            </li>
        }
    </ul>
}

<zone name="checkout_shipping_method_content_after" />

<style>
    
    .product-item:hover .store-select-dropdown {
        display: block !important;
    }
    .store-select-dropdown {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
    }






/* On smaller screens (mobile), reposition the dropdown */
@@media (max-width: 768px) {
    .store-select-dropdown {
        position: relative; /* Remove absolute */
        top: auto;
        right: auto;
        transform: none;
        width: 100%; /* Full width */
        margin-top: 8px; /* spacing below the product text */
        z-index: 10;
    }

    .product-item {
        flex-direction: column; /* Stack content vertically */
        align-items: flex-start;
    }
}



    
    .input-group {
    position: relative;
}

    .input-group .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        border-radius: 0;
    }

    .input-group .btn:last-child {
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
    }

    .input-group .map-address-input {
        border-right: 0;
    }

    .input-group .current-location-btn {
        border-radius: 0;
        border-right: 1px solid rgba(0,0,0,0.1);
        white-space: nowrap;
    }

    .input-group .current-location-btn .text {
        display: inline;
    }

    .input-group .map-toggle-btn:hover {
        background-color: #e9ecef;
    }
    
    #addressSuggestions {
        position: relative;
        z-index: 9999;
        background: #fff;
        border: 1px solid #ccc;
        left: 0;
        right: 0;
    }
    #addressSuggestions .dropdown-item {
        cursor: pointer;
        padding: 8px 12px;
    }
    #addressSuggestions .dropdown-item:hover {
        background-color: #f8f9fa;
    }
    
    @@media (max-width: 768px) {
        .input-group .current-location-btn .text {
            display: none;
        }
        .input-group .current-location-btn i {
            margin-right: 0 !important;
        }
    }
</style>

<!-- Leaflet CSS & JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
<!-- Add this error container at the top of your content -->
<div id="validationErrors" class="alert alert-danger d-none"></div>

<script src="~/js/checkout-shipping-methods.js" data-store-pickup-method-id="@storePickupMethodId"></script>

<script src="~/js/storePickupPersistence.js"></script>