﻿@using Smartstore.Web.Models.Checkout
@using Smartstore.Core.Checkout.Cart
@using Smartstore.Core
@using Smartstore.Core.Common.Services
@inject IStoreProductService storeProductService
@inject IShoppingCartService shoppingCartService
@inject IWorkContext workContext

@model CheckoutShippingMethodModel

@functions {
    private IList<ShoppingCartItem> _cartItems;

    public async Task LoadCartAsync()
    {
        var customer = workContext.CurrentCustomer;
        var cart = await shoppingCartService.GetCartAsync(customer, ShoppingCartType.ShoppingCart);
        _cartItems = cart.Items.Select(x => x.Item).ToList();
    }
}

@{
    await LoadCartAsync();
    var sortedShippingMethods = Model.ShippingMethods
        .OrderBy(sm =>
            sm.Name.ToLowerInvariant().Contains("by ground") ? 0 :
            sm.Name.ToLowerInvariant().Contains("store pickup") ? 1 : 2)
        .ToList();

    var storePickupMethod = sortedShippingMethods
        .FirstOrDefault(sm => sm.Name.ToLowerInvariant().Contains("store pickup"));
    var storePickupMethodId = storePickupMethod?.ShippingMethodId ?? 0;
}

<zone name="checkout_shipping_method_content_before" />

@if (Model.Warnings.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var warning in Model.Warnings)
            {
                <li>@warning</li>
            }
        </ul>
    </div>
}
else
{
    <ul class="list-group opt-list shipping-options">
        @for (int i = 0; i < sortedShippingMethods.Count; i++)
        {
            var shippingMethod = sortedShippingMethods[i];
            var isStorePickup = shippingMethod.Name?.ToLowerInvariant().Contains("store pickup") == true;
            var isByGround = shippingMethod.Name.ToLowerInvariant() == "by ground";

            <li class="list-group-item opt-list-item shipping-option-item @(shippingMethod.Selected ? "active" : "")" data-index="@i">
                <div class="opt-data">
                    <div class="form-check opt-control option-name radio">
                        <input id="shippingoption_@(i)" type="radio" name="shippingoption"
                               class="opt-radio form-check-input"
                               value="@(shippingMethod.ShippingMethodId)___@(shippingMethod.ShippingRateComputationMethodSystemName)"
                               data-shippingmethodid="@(shippingMethod.ShippingMethodId)"
                               data-shipping-name="@shippingMethod.Name"
                               @(shippingMethod.Selected ? "checked" : "") />
                        <label class="form-check-label" for="shippingoption_@(i)">
                            <span class="opt-name">@Html.Raw(shippingMethod.Name.HtmlDecode())</span>
                        </label>
                    </div>

                    @if (shippingMethod.Fee > decimal.Zero)
                    {
                        <div class="opt-fee shipping-fee badge badge-danger ml-auto">
                            @shippingMethod.Fee
                        </div>
                    }
                </div>

                @if (isStorePickup)
                {
                    <div id="storePickupProducts" class="mt-3">
                        <label class="form-label font-weight-bold">Your Cart Items:</label>
                        <div class="list-group">
                            @foreach (var item in _cartItems)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center product-item" style="position: relative;">
                                    <div>
                                        <div class="product-name">@item.Product.Name</div>
                                        <div class="product-quantity text-muted small">Qty: @item.Quantity</div>
                                    </div>

                                    <select class="form-control form-control-sm store-select-dropdown" 
                                            name="StoreFor_@item.Id" 
                                            style="display:none; min-width: 150px;">
                                        <option value="">-- Select Store --</option>
                                        @foreach (var store in await storeProductService.GetStoresForProductAsync(item.ProductId))
                                        {
                                            <option value="@store">@store</option>
                                        }
                                    </select>
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (isByGround)
                {
                    <div class="by-ground-extra mt-2" style="display:@(shippingMethod.Selected ? "flex" : "none"); flex-wrap: wrap; align-items:center; gap:8px;">
                        <button type="button" class="btn btn-sm btn-primary current-location-btn">Current Location</button>
                        <input type="text" class="form-control map-address-input" style="max-width:250px;"
                               placeholder="Enter address or use current location" name="ByGroundAddress" value="@Model.ByGroundAddress" autocomplete="off" />

                        <input type="hidden" id="mapCoordinates" name="MapCoordinates" value="@Model.ByGroundAddress" />

                        <a class="google-map-link" href="#" target="_blank" style="display:none;">Open in Google Maps</a>

                        <div id="leafletMap" style="height: 300px; width: 100%; max-width: 400px; margin-top: 10px; border: 1px solid #ddd; border-radius: 4px;"></div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(shippingMethod.Description))
                {
                    <div class="opt-info text-muted shipping-option-description mt-2">
                        @if (!string.IsNullOrEmpty(shippingMethod.BrandUrl))
                        {
                            <div class="media">
                                <span class="float-left">
                                    <img class="media-object img-fluid" src="@Url.Content(shippingMethod.BrandUrl)" alt="@shippingMethod.Name" />
                                </span>
                                <div class="media-body">
                                    @Html.Raw(shippingMethod.Description)
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.Raw(shippingMethod.Description);
                        }
                    </div>
                }
            </li>
        }
    </ul>
}

<zone name="checkout_shipping_method_content_after" />

<style>
    .product-item:hover .store-select-dropdown {
        display: block !important;
    }

    .store-select-dropdown {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
    }
</style>

<!-- Leaflet CSS & JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const storePickupProducts = document.getElementById('storePickupProducts');
        const storePickupMethodId = @storePickupMethodId;

        function toggleStorePickupProducts() {
            const selectedRadio = document.querySelector('input[name="shippingoption"]:checked');
            const selectedId = selectedRadio ? parseInt(selectedRadio.dataset.shippingmethodid) : null;

            if (selectedId === storePickupMethodId && storePickupProducts) {
                storePickupProducts.style.display = 'block';
            } else if (storePickupProducts) {
                storePickupProducts.style.display = 'none';
            }
        }

        document.querySelectorAll('input[name="shippingoption"]').forEach(radio => {
            radio.addEventListener('change', toggleStorePickupProducts);
        });

        toggleStorePickupProducts();

        function toggleByGroundMap(selectedRadio) {
            document.querySelectorAll('.by-ground-extra').forEach(el => el.style.display = 'none');
            if (selectedRadio.dataset.shippingName.toLowerCase() === 'by ground') {
                const container = selectedRadio.closest('[data-index]');
                const extra = container.querySelector('.by-ground-extra');
                if (extra) extra.style.display = 'flex';
            }
        }

        document.querySelectorAll('input[name="shippingoption"]').forEach(radio => {
            radio.addEventListener('change', e => toggleByGroundMap(e.target));
            if (radio.checked) toggleByGroundMap(radio);
        });

        let map, marker;

        function initLeafletMap() {
            const mapContainer = document.getElementById('leafletMap');
            if (!mapContainer) return;

            let lat = 9.03, lng = 38.74;

            const coordInput = document.getElementById('mapCoordinates');
            if (coordInput && coordInput.value) {
                const parts = coordInput.value.split(',');
                if (parts.length === 2) {
                    const parsedLat = parseFloat(parts[0]);
                    const parsedLng = parseFloat(parts[1]);
                    if (!isNaN(parsedLat) && !isNaN(parsedLng)) {
                        lat = parsedLat;
                        lng = parsedLng;
                    }
                }
            }

            map = L.map('leafletMap').setView([lat, lng], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            marker = L.marker([lat, lng], { draggable: true }).addTo(map);
            marker.on('dragend', () => {
                const pos = marker.getLatLng();
                updateCoordinates(pos.lat, pos.lng);
            });

            map.on('click', e => {
                marker.setLatLng(e.latlng);
                updateCoordinates(e.latlng.lat, e.latlng.lng);
            });

            updateGoogleMapLink(lat, lng);
        }

        function updateCoordinates(lat, lng) {
            const coordInput = document.getElementById('mapCoordinates');
            const mapLink = document.querySelector('.google-map-link');
            if (coordInput) coordInput.value = `${lat.toFixed(6)},${lng.toFixed(6)}`;
            if (mapLink) {
                mapLink.href = `https://www.google.com/maps?q=${lat},${lng}`;
                mapLink.style.display = 'inline';
            }
        }

        initLeafletMap();
    });
</script>
