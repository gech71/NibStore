﻿﻿﻿@using Smartstore.Web.Models.Checkout
@using Smartstore.Core.Checkout.Cart
@using Smartstore.Core
@using Smartstore.Core.Common.Services
@inject IStoreProductService storeProductService
@inject IShoppingCartService shoppingCartService
@inject IWorkContext workContext

@model CheckoutShippingMethodModel

@functions {
    private IList<ShoppingCartItem> _cartItems;

    public async Task LoadCartAsync()
    {
        var customer = workContext.CurrentCustomer;
        var cart = await shoppingCartService.GetCartAsync(customer, ShoppingCartType.ShoppingCart);
        _cartItems = cart.Items.Select(x => x.Item).ToList();
    }
}

@{
    await LoadCartAsync();
    var sortedShippingMethods = Model.ShippingMethods
        .OrderBy(sm =>
            sm.Name.ToLowerInvariant().Contains("by ground") ? 0 :
            sm.Name.ToLowerInvariant().Contains("store pickup") ? 1 : 2)
        .ToList();

    var storePickupMethod = sortedShippingMethods
        .FirstOrDefault(sm => sm.Name.ToLowerInvariant().Contains("store pickup"));
    var storePickupMethodId = storePickupMethod?.ShippingMethodId ?? 0;
}

<zone name="checkout_shipping_method_content_before" />

@if (Model.Warnings.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var warning in Model.Warnings)
            {
                <li>@warning</li>
            }
        </ul>
    </div>
}
else
{
    <ul class="list-group opt-list shipping-options">
        @for (int i = 0; i < sortedShippingMethods.Count; i++)
        {
            var shippingMethod = sortedShippingMethods[i];
            var isStorePickup = shippingMethod.Name?.ToLowerInvariant().Contains("store pickup") == true;
            var isByGround = shippingMethod.Name.ToLowerInvariant() == "by ground";

            <li class="list-group-item opt-list-item shipping-option-item @(shippingMethod.Selected ? "active" : "")" data-index="@i">
                <div class="opt-data">
                    <div class="form-check opt-control option-name radio">
                        <input id="shippingoption_@(i)" type="radio" name="shippingoption"
                               class="opt-radio form-check-input"
                               value="@(shippingMethod.ShippingMethodId)___@(shippingMethod.ShippingRateComputationMethodSystemName)"
                               data-shippingmethodid="@(shippingMethod.ShippingMethodId)"
                               data-shipping-name="@shippingMethod.Name"
                               @(shippingMethod.Selected ? "checked" : "") />
                        <label class="form-check-label" for="shippingoption_@(i)">
                            <span class="opt-name">@Html.Raw(shippingMethod.Name.HtmlDecode())</span>
                        </label>
                    </div>

                    @if (shippingMethod.Fee > decimal.Zero)
                    {
                        <div class="opt-fee shipping-fee badge badge-danger ml-auto">
                            @shippingMethod.Fee
                        </div>
                    }
                </div>

                @if (isStorePickup)
                {
                    <div id="storePickupProducts" class="mt-3">
                        <label class="form-label font-weight-bold">Your Cart Items:</label>
                        <div class="list-group">
                            @foreach (var item in _cartItems)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center product-item" style="position: relative;">
                                    <div>
                                        <div class="product-name">@item.Product.Name</div>
                                        <div class="product-quantity text-muted small">Qty: @item.Quantity</div>
                                    </div>
                                  @{
                                        var availableStores = await storeProductService.GetStoresForProductAsync(item.ProductId, item.Quantity);
                                    }

                                    @if (availableStores.Any())
                                    {
                                        <select class="form-control store-select form-control-sm store-select-dropdown" 
        data-item-id="@item.Id" 
        name="StoreFor_@item.Id" 
        style="display:none; min-width: 150px;">
    <option value="">-- Select Store --</option>
    @foreach (var store in availableStores)
    {
        <option 
            value="@store.Name" 
            data-store-id="@store.Id" 
            selected="@(item.StoreId == store.Id ? "selected" : null)">
            @store.Name
        </option>
    }
</select>

                                    }
                                    else
                                    {
                                        <div class="text-danger small mt-1">
                                            No stores have sufficient stock for this item
                                        </div>
                                    }




                                </div>
                            }
                        </div>
                    </div>
                }

                @if (isByGround)
                {
                    <div class="by-ground-extra mt-3" style="display:@(shippingMethod.Selected ? "flex" : "none"); flex-wrap: wrap; align-items:center; gap:8px;">
                        <div class="w-100">
                            <div class="input-group">
                                <input type="text" 
                                       class="form-control map-address-input" 
                                       placeholder="Enter delivery address" 
                                       name="ByGroundAddress" 
                                       id="addressInput"
                                       value="@Model.ByGroundAddress" 
                                       autocomplete="address-line1" />
                                <button type="button" class="btn btn-primary current-location-btn">
                                    Current Location
                                </button>
                                <button type="button" class="btn btn-light map-toggle-btn" title="Show/Hide Map">
                                    <i class="fa fa-globe"></i>
                                </button>
                            </div>
                            <div id="addressSuggestions" class="dropdown-menu w-100" style="display: none;"></div>
                        </div>
                        <div id="addressError" class="text-danger small mt-1" style="display:none;"></div>
                        
                        <input type="hidden" id="mapCoordinates" name="MapCoordinates" value="" />
                        <input type="hidden" id="latitudeField" name="ByGroundLatitude" value="@Model.ByGroundLatitude" />
                        <input type="hidden" id="longitudeField" name="ByGroundLongitude" value="@Model.ByGroundLongitude" />

                        <div id="leafletMap" style="height: 300px; width: 100%; margin-top: 10px; border: 1px solid #ddd; border-radius: 4px; display: none;"></div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(shippingMethod.Description))
                {
                    <div class="opt-info text-muted shipping-option-description mt-2">
                        @if (!string.IsNullOrEmpty(shippingMethod.BrandUrl))
                        {
                            <div class="media">
                                <span class="float-left">
                                    <img class="media-object img-fluid" src="@Url.Content(shippingMethod.BrandUrl)" alt="@shippingMethod.Name" />
                                </span>
                                <div class="media-body">
                                    @Html.Raw(shippingMethod.Description)
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.Raw(shippingMethod.Description);
                        }
                    </div>
                }
            </li>
        }
    </ul>
}

<zone name="checkout_shipping_method_content_after" />

<style>
    
    .product-item:hover .store-select-dropdown {
        display: block !important;
    }
    .store-select-dropdown {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
    }
    
    .input-group {
    position: relative;
}

    .input-group .btn {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        border-radius: 0;
    }

    .input-group .btn:last-child {
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
    }

    .input-group .map-address-input {
        border-right: 0;
    }

    .input-group .current-location-btn {
        border-radius: 0;
        border-right: 1px solid rgba(0,0,0,0.1);
        white-space: nowrap;
    }

    .input-group .map-toggle-btn:hover {
        background-color: #e9ecef;
    }
    
    #addressSuggestions {
        position: relative;
        z-index: 9999;
        background: #fff;
        border: 1px solid #ccc;
        left: 0;
        right: 0;
    }
    #addressSuggestions .dropdown-item {
        cursor: pointer;
        padding: 8px 12px;
    }
    #addressSuggestions .dropdown-item:hover {
        background-color: #f8f9fa;
    }
    
    @@media (max-width: 768px) {
        .by-ground-extra {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .map-address-input {
            max-width: 100% !important;
        }
        
        #leafletMap {
            max-width: 100% !important;
        }
    }
</style>

<!-- Leaflet CSS & JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
<!-- Add this error container at the top of your content -->
<div id="validationErrors" class="alert alert-danger d-none"></div>


<script>
    
    document.addEventListener('DOMContentLoaded', () => {

     $(document).on('change', '.store-select', function () {
    var storeName = $(this).val(); // store name from value
    var itemId = $(this).data('item-id'); // get item ID
    var storeId = $(this).find('option:selected').data('store-id'); // store ID from selected option
    console.log(storeId);
    if (storeName && storeId) {
        $.ajax({
            url: '/ShoppingCart/UpdateCartItemStore',
            method: 'POST',
            data: {
                itemId: itemId,
                storeName: storeName,
                storeId: storeId
            },
            success: function (response) {
                if (response.success) {
                    alert('Store updated successfully');
                } else {
                    alert(response.message || 'Failed to update store');
                }
            },
            error: function () {
                alert('Server error occurred.');
            }
        });
    }
});

        const storePickupProducts = document.getElementById('storePickupProducts');
        const storePickupMethodId = @storePickupMethodId;
        let map, marker;
        let debounceTimer;
        let addressInput = document.getElementById('addressInput');
        let addressSuggestions = document.getElementById('addressSuggestions');

        // Initialize the page
        initPage();

        function initPage() {
            toggleStorePickupProducts();
            initEventListeners();
            restoreSavedData();
            initLeafletMap();
        }

        function toggleStorePickupProducts() {
            const selectedRadio = document.querySelector('input[name="shippingoption"]:checked');
            const selectedId = selectedRadio ? parseInt(selectedRadio.dataset.shippingmethodid) : null;

            if (selectedId === storePickupMethodId && storePickupProducts) {
                storePickupProducts.style.display = 'block';
            } else if (storePickupProducts) {
                storePickupProducts.style.display = 'none';
            }
        }

        function initEventListeners() {
            // Shipping method radio buttons
            document.querySelectorAll('input[name="shippingoption"]').forEach(radio => {
                radio.addEventListener('change', () => {
                    toggleStorePickupProducts();
                    toggleByGroundMap(radio);
                });
                if (radio.checked) toggleByGroundMap(radio);
            });

            // Map toggle button
            document.querySelector('.map-toggle-btn')?.addEventListener('click', function() {
                const mapElement = document.getElementById('leafletMap');
                if (mapElement) {
                    const isVisible = mapElement.style.display !== 'none';
                    mapElement.style.display = isVisible ? 'none' : 'block';
                    
                    // Refresh map when showing it (prevents rendering issues)
                    if (!isVisible && map) {
                        setTimeout(() => {
                            map.invalidateSize();
                            // If we have coordinates, center the map on them
                            const lat = document.getElementById('latitudeField').value;
                            const lng = document.getElementById('longitudeField').value;
                            if (lat && lng) {
                                map.setView([parseFloat(lat), parseFloat(lng)], map.getZoom());
                            }
                        }, 100);
                    }
                }
            });

            // Store selection dropdowns
            document.querySelectorAll('.store-select-dropdown').forEach(dropdown => {
                dropdown.addEventListener('change', function() {
                    if (this.value) {
                        this.style.display = 'none';
                        const productItem = this.closest('.product-item');
                        const productName = productItem.querySelector('.product-name');
                        if (!productName.innerText.includes('(')) {
                            productName.innerText += ` (${this.value})`;
                        }
                    }
                });
            });

            // Address input handling
            if (addressInput) {
                addressInput.addEventListener('input', handleAddressInput);
                addressInput.addEventListener('blur', validateAddressInput);
                addressInput.addEventListener('focus', showAddressSuggestionsIfAvailable);
            }

            // Current location button
            document.querySelector('.current-location-btn')?.addEventListener('click', handleCurrentLocation);
        }

        function restoreSavedData() {
            const savedAddress = localStorage.getItem('byGroundAddress');
            if (savedAddress && addressInput) {
                addressInput.value = savedAddress;
            }
        }

        function toggleByGroundMap(selectedRadio) {
            document.querySelectorAll('.by-ground-extra').forEach(el => el.style.display = 'none');
            if (selectedRadio.dataset.shippingName.toLowerCase() === 'by ground') {
                const container = selectedRadio.closest('[data-index]');
                const extra = container.querySelector('.by-ground-extra');
                if (extra) extra.style.display = 'flex';
            } else {
                // Clear the hidden fields if not By Ground/Delivery
                document.getElementById('latitudeField').value = '';
                document.getElementById('longitudeField').value = '';
                document.getElementById('addressInput').value = '';
            }
        }

        function initLeafletMap() {
            const mapContainer = document.getElementById('leafletMap');
            if (!mapContainer) return;

            let lat = 9.03, lng = 38.74;
            map = L.map('leafletMap').setView([lat, lng], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);

            //L.Control.geocoder({
            //    defaultMarkGeocode: false
            //})
            //.on('markgeocode', function(e) {
            //    const center = e.geocode.center;
            //    map.setView(center, 13);
            //    marker.setLatLng(center);
            //    updateAddressAndCoordinates(e.geocode.name, center.lat, center.lng);
            //}).addTo(map);

            marker = L.marker([lat, lng], { draggable: true }).addTo(map);
            marker.on('dragend', async () => {
                const pos = marker.getLatLng();
                const address = await reverseGeocode(pos.lat, pos.lng);
                updateAddressAndCoordinates(address, pos.lat, pos.lng);
            });

            map.on('click', async (e) => {
                marker.setLatLng(e.latlng);
                const address = await reverseGeocode(e.latlng.lat, e.latlng.lng);
                updateAddressAndCoordinates(address, e.latlng.lat, e.latlng.lng);
            });
        }

        function handleAddressInput(e) {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                if (e.target.value.length > 3) {
                    searchAddress(e.target.value);
                } else {
                    hideAddressSuggestions();
                }
            }, 500);
        }

        function searchAddress(query) {
            setLoading(true, addressInput);
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
                .then(res => res.json())
                .then(data => {
                    if (data.length > 0) {
                        showAddressSuggestions(data);
                    } else {
                        hideAddressSuggestions();
                    }
                })
                .catch(() => hideAddressSuggestions())
                .finally(() => setLoading(false, addressInput));
        }

        function showAddressSuggestions(addresses) {
            if (!addressSuggestions) return;
            
            addressSuggestions.innerHTML = '';
            addresses.slice(0, 5).forEach(addr => {
                const item = document.createElement('div');
                item.className = 'dropdown-item';
                item.textContent = addr.display_name;
                item.addEventListener('click', () => {
                    const lat = parseFloat(addr.lat);
                    const lng = parseFloat(addr.lon);
                    map.setView([lat, lng], 15);
                    marker.setLatLng([lat, lng]);
                    updateAddressAndCoordinates(addr.display_name, lat, lng);
                    hideAddressSuggestions();
                });
                addressSuggestions.appendChild(item);
            });
            
            addressSuggestions.style.display = 'block';
        }

        function showAddressSuggestionsIfAvailable() {
            if (addressSuggestions.innerHTML.trim() !== '') {
                addressSuggestions.style.display = 'block';
            }
        }

        function hideAddressSuggestions() {
            if (addressSuggestions) {
                addressSuggestions.style.display = 'none';
            }
        }

        function validateAddressInput() {
            setTimeout(() => {
                hideAddressSuggestions();
                if (addressInput.value.trim() && !document.getElementById('latitudeField').value) {
                    showAddressError('Please select a valid address from the suggestions or use the map');
                    return false;
                }
                hideAddressError();
                return true;
            }, 350);
        }

        function handleCurrentLocation() {
            if (navigator.geolocation) {
                setLoading(true, document.querySelector('.current-location-btn'));
                navigator.geolocation.getCurrentPosition(async (pos) => {
                    const { latitude, longitude } = pos.coords;
                    map.setView([latitude, longitude], 15);
                    marker.setLatLng([latitude, longitude]);
                    const address = await reverseGeocode(latitude, longitude);
                    updateAddressAndCoordinates(address, latitude, longitude);
                    setLoading(false, document.querySelector('.current-location-btn'));
                }, () => {
                    alert('Could not get your location. Please make sure location services are enabled.');
                    setLoading(false, document.querySelector('.current-location-btn'));
                });
            } else {
                alert('Geolocation is not supported by your browser');
            }
        }

        function updateAddressAndCoordinates(address, lat, lng) {
            if (addressInput) {
                addressInput.value = address;
                localStorage.setItem('byGroundAddress', address);
            }
            document.getElementById('mapCoordinates').value = `${lat},${lng}`;
            document.getElementById('latitudeField').value = lat;
            document.getElementById('longitudeField').value = lng;
            
            const googleMapLink = document.querySelector('.google-map-link');
            if (googleMapLink) {
                googleMapLink.href = `https://maps.google.com/?q=${lat},${lng}`;
                googleMapLink.style.display = 'inline';
            }
        }

        async function reverseGeocode(lat, lng) {
            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`);
                const data = await response.json();
                return data.display_name || "Address not found";
            } catch (error) {
                console.error('Reverse geocoding error:', error);
                return "Address not found";
            }
        }

        function setLoading(state, element) {
            if (!element) return;
            
            if (element.classList.contains('current-location-btn')) {
                element.disabled = state;
                element.innerHTML = state 
                    ? '<span class="spinner-border spinner-border-sm" role="status"></span> Locating...'
                    : '<i class="fa fa-location-arrow"></i> Current Location';
            } else if (element === addressInput) {
                // Could add a loading indicator for the address input if needed
            }
        }

        const form = addressInput?.closest('form');
if (form) {
    form.addEventListener('submit', function(e) {
        const selectedRadio = document.querySelector('input[name="shippingoption"]:checked');
        if (selectedRadio && selectedRadio.dataset.shippingName.toLowerCase() === 'by ground') {
            if (!document.getElementById('latitudeField').value) {
                showAddressError('Please select a valid address from the suggestions or use the map');
                e.preventDefault();
                return false;
            }
        }
        hideAddressError();
    });
}

// Hide error as soon as user types
if (addressInput) {
    addressInput.addEventListener('input', hideAddressError);
}

function showAddressError(message) {
    const errorDiv = document.getElementById('addressError');
    if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }
    if (addressInput) {
        addressInput.focus();
    }
}

function hideAddressError() {
    const errorDiv = document.getElementById('addressError');
    if (errorDiv) {
        errorDiv.textContent = '';
        errorDiv.style.display = 'none';
    }
}
    });
</script>